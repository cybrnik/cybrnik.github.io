{"version":3,"sources":["App.js","index.js"],"names":["App","state","text","scheme","lights","popout","changeText","bind","getItems","bridge","subscribe","detail","type","data","camelCase","e","target","value","this","setState","ScreenSpinner","api","encodeURI","fetch","then","result","catch","needChange","isLight","includes","send","isWebView","View","activePanel","Panel","id","PanelHeader","Group","FormItem","top","Textarea","onChange","placeholder","Button","stretched","style","marginTop","onClick","mode","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2RAwFeA,E,kDAxEd,aAAe,IAAD,8BACb,gBAEKC,MAAQ,CACZC,KAAM,GACNC,OAAQ,eACRC,OAAQ,CAAC,eAAgB,gBACzBC,OAAQ,MAGT,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,SAAU,EAAKA,SAASD,KAAd,gBAXF,E,qDAcd,WAAqB,IAAD,OACnBE,IAAOC,WAAU,YAAgC,IAAD,IAA5BC,OAAUC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,KACpB,yBAATD,GACN,EAAKE,UAAWD,EAAKV,a,wBAGvB,SAAWY,GACV,IAAIb,EAAOa,EAAEC,OAAOC,MACpBC,KAAKC,SAAS,CAAEjB,KAAMA,M,sBAEvB,SAASA,GAAO,IAAD,OAGdgB,KAAKC,SAAS,CAAEd,OAAQ,cAACe,EAAA,EAAD,MACxB,IAAIC,EAAG,wCAAoCC,UAAUpB,IACrDqB,MAAMF,GACLG,MAAK,SAAAX,GAAI,OAAIA,EAAKX,UAClBsB,MAAK,SAACC,GACN,EAAKN,SAAS,CAAEd,OAAQ,OAExB,EAAKc,SAAS,CAACjB,KAAMuB,OAErBC,OAAM,SAAAX,GAAC,MAAI,Q,uBAEb,SAAWZ,GAA8B,IAAtBwB,EAAqB,wDACnCC,EAAUV,KAAKjB,MAAMG,OAAOyB,SAAU1B,GAEtCwB,IAAoBC,GAAWA,GACnCV,KAAKC,SAAS,CAAEhB,OAAQyB,EAAU,eAAiB,eAEnDnB,IAAOqB,KAAK,0BAA2B,CACrC,iBAAoBF,EAAU,OAAS,QACvC,iBAAoBA,EAAU,OAAS,W,oBAG1C,WAAU,IAAD,OACR,OACC,cAAC,IAAD,CAAgBG,WAAW,EAAM5B,OAAQe,KAAKjB,MAAME,OAApD,SACA,cAAC6B,EAAA,EAAD,CAAMC,YAAc,YAAa5B,OAAQa,KAAKjB,MAAMI,OAApD,SAEC,eAAC6B,EAAA,EAAD,CAAOC,GAAG,YAAV,UACC,cAACC,EAAA,EAAD,mBACA,cAACC,EAAA,EAAD,UACC,eAACC,EAAA,EAAD,CAAUC,IAAI,4EAAd,UAEC,cAACC,EAAA,EAAD,CAAUL,GAAG,WAAWlB,MAAOC,KAAKjB,MAAMC,KAAMuC,SAAUvB,KAAKZ,WAAYoC,YAAY,qaAEvF,eAACL,EAAA,EAAD,WAAO,cAACM,EAAA,EAAD,CAAQC,WAAS,EAACC,MAAO,CAAEC,UAAW,GAAKC,QAAS,kBAAM,EAAKvC,SAAS,EAAKP,MAAMC,OAAO8C,KAAK,WAA/F,2EAAP,uB,GA/DWC,IAAMC,WCRxBzC,IAAOqB,KAAK,gBAEZqB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.724b46c9.chunk.js","sourcesContent":["import React from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport {ConfigProvider} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport Textarea from '@vkontakte/vkui/dist/components/Textarea/Textarea';\nimport { FormItem } from '@vkontakte/vkui/dist/components/FormItem/FormItem';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport '@vkontakte/vkui/dist/vkui.css';\nclass App extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\ttext: '',\n\t\t\tscheme: 'bright_light',\n\t\t\tlights: ['bright_light', 'client_light'],\n\t\t\tpopout: null\n\t\t};\n\t\t\n\t\tthis.changeText = this.changeText.bind(this);\n\t\tthis.getItems= this.getItems.bind(this);\n\n\t}\n\tcomponentDidMount() {\n\t\tbridge.subscribe(({ detail: { type, data }}) => {\n\t\t  if ( type === 'VKWebAppUpdateConfig' ) { // Получаем тему клиента.\n\t\t\tthis.camelCase( data.scheme )    }\n\t\t})\n\t  }\n\tchangeText(e) {\n\t\tlet text = e.target.value\n\t\tthis.setState({ text: text });\n\t}\n\tgetItems(text) {\n\t\t\n\n\t\tthis.setState({ popout: <ScreenSpinner /> })\n\t\tlet api = `https://syumsh.org/gpt3/?text=${encodeURI(text)}`\n\t\tfetch(api)\n\t\t.then(data => data.text())\n\t\t.then((result) => {\n\t\t\tthis.setState({ popout: null })\n\t\t\t\n\t\t\tthis.setState({text: result})\n\t\t})\n\t\t.catch(e => [])\n\t}\n\tcamelCase( scheme, needChange = false ) {\n\t\tlet isLight = this.state.lights.includes( scheme );\n\t\t\t  \n\t\tif( needChange ) {      isLight = !isLight;  }\n\t\tthis.setState({ scheme: isLight ? 'bright_light' : 'space_gray' });\n\t  \n\t\tbridge.send('VKWebAppSetViewSettings', {\n\t\t\t 'status_bar_style': isLight ? 'dark' : 'light',\n\t\t\t 'action_bar_color': isLight ? '#000' : '#FFF'\n\t\t});\n\t  }\n\trender() {\n\t\treturn(\n\t\t\t<ConfigProvider isWebView={true} scheme={this.state.scheme}> \n\t\t\t<View activePanel = \"mainPanel\"  popout={this.state.popout}>\n\n\t\t\t\t<Panel id=\"mainPanel\">\n\t\t\t\t\t<PanelHeader>GPT3</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<FormItem top=\"Введите текст\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<Textarea id=\"UniDiArr\" value={this.state.text} onChange={this.changeText} placeholder=\"Для торговли на бирже понадобится брокер. Брокер - ваш представитель и проводник.\" />\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<Group><Button stretched style={{ marginTop: 8 }} onClick={() => this.getItems(this.state.text)} mode=\"commerce\">Продолжить!</Button> </Group>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t</View>\n\t\t</ConfigProvider> \n\t\t);\n\t}\n}\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}